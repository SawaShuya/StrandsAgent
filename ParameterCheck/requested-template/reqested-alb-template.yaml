SecurityGroup:
  Type: AWS::EC2::SecurityGroup
  Properties:
    SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 80
        ToPort: 80
        CidrIp: 172.31.0.0/16
    SecurityGroupEgress:
      - CidrIp: 0.0.0.0/0
        IpProtocol: '-1'

TargetGroup:
  Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
  Properties:
    IpAddressType: "ipv4"
    HealthCheckPath: "/"
    Port: 80
    VpcId: vpc-b218f4d4
    TargetGroupAttributes:
      - Value: "false"
        Key: "stickiness.enabled"
    TargetType: "ip"
    HealthCheckPort: "traffic-port"
    Protocol: "HTTP"

LoadBalancer:
  Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
  Properties:
    VpcId: vpc-b218f4d4
    SecurityGroups:
      - !Ref SecurityGroup
    Subnets:
      - subnet-0e43c8c66bcd30b52
      - subnet-0fd29810dddf03d60
    Type: "application"
    Scheme: "internal"

Listener:
  Type: "AWS::ElasticLoadBalancingV2::Listener"
  Properties:
    Protocol: "HTTP"
    LoadBalancerArn: !Ref LoadBalancer
    DefaultActions:
    - Order: 1
      FixedResponseConfig:
        ContentType: "text/plain"
        StatusCode: "503"
      Type: "fixed-response"
    Port: 80

ListenerRule:
  Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
  Properties:
    Actions:
      - TargetGroupArn: !Ref TargetGroup
    Priority: 10
    Conditions:
      - Field: "path-pattern"
        PathPatternConfig:
          Values:
          - "/sample*"
    ListenerArn: !Ref Listener